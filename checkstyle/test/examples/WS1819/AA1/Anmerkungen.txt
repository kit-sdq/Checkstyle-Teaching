__________________________V1_________________________
- java.util.regex bitte erlauben
- Kasten Terminal-Klasse, eventuell explizit reinschreiben, dass sie einfach Terminal.printError benutzen sollen
- Einer der Spieler– als Nature bezeichnet – // Leerzeichen nach Spieler fehlt, außerdem sind die Striche bei mir nahezu unsichtbar
- Wenn dieser Spielstein sich bereits // Wenn sich dieser Spielstein bereits
- muss aus dem Satz der verbleibenden Spielsteine derjenige mit der nächst kleineren Länge oder der nächst größeren Länge auf dem Spielbrett platziert werden // zufällig? Das könnten wir nicht mehr vernünftig testen. Außerdem was passiert wenn 2 und 4 schon gelegt sind und eine 3 gewürfelt wird
- Die maximale Anzahl der Schritte // maximal? müssen nicht alle schritte getätigt werden?
- Generell, es steht nirgendwo wie viele Runden es in Phase 1 und 2 gibt
- Berechnung der freien Felder // beim ersten Durchlesen hab ich keine Ahnung wie das konkret gemacht werden soll?
- Der set-vc-Befehl // wann darf der ausgeführt werden?
- Generell, würde es für die Bezeichner m,n,m1,n2 nicht Punktabzug geben?
- Generell, Erläuterung, was ein nicht freies Feld ist
- Der parameterlose Befehl list zeigt alle Platzierungsoptionen für den Spieler Mission Control an. Dieser Befehl ist nur vor Ausführung eines place-Befehls erlaubt. // wenn im Spiel irgendwann ein place-Befehl ausgeführt wird darf list davor immer ausgeführt werden, würde hier eher eine feste Befehlsreihenfolge festlegen? (oder ist damit direkt davor gemeint?)
- Der show-result-Befehl // Das E im Ausgabeformat ist ein beliebiger Platzhalter oder?
- MC wird ausgegeben, wenn sich auf einem Feld ein Spielstein des Spielers Mission Control befindet. EIN Spielstein von Mission Control hat doch mindestens die Länge 2 und kann sich dadurch nicht auf exakt einem Feld befinden?
- MC, würde ich durch einen Buchstaben ersetzen, macht print übersichtlicher (bei monospaced font)
- Generell, etwas inkonsistent bei der Benutzung spitzer Klammern (welche Parameter kriegen welche und welche nicht?), außerdem mal wird rownumber und mal m benutzt (kann man durchaus machen, gibt aber recht sicher eine Frage im Forum)
- row und colprint übernehmen die Fallunterscheidung von print, welches sie schon von state übernehmen könnte
- System.exit() // hier mit Klammern, oben ohne, außerdem wieso wird auf die docs verlinkt, wenn man das ja explizit NICHT machen soll
- ob gerade ein Spieler aktiv ist oder nicht// und was ist mit einem Spiel?

- wie wird bei list sortiert?
- bei list Ausgabeformat: m1;n2;m2;n2 --> das erste n2 sollte n1 heißen
- Beispiele und Abbildungen wären noch gut

__________________________V2_________________________
- Ein Spiel endet nach Ende der zweiten Spielphase. // Beendet aber nicht das Programm.
- Die Länge des gerade in ii) verwendeten Spielsteins gibt die maximale Anzahl der Elementarschritte an. // Ist hier gemeint, dass auch weniger Schritte gemacht werden dürfen? Wenn ja wäre es glaube ich hilfreich, das explizit dazuzuschreiben (wie in der Quelle).
- Der erste Parameter in diesem Befehl stellt die Länge des Spielsteins des Spielers Mission Control dar, die zuvor nach den oben spezifizierten Regeln ermittelt wurde. // place<m1>;<n1>;<m2>;<n2> Länge(<symbol>) fehlt noch oder?
- Berechnung der freien Felder // ich würde hier freie Felder ersetzen durch etwas in der Art: durch Elementarschritte erreichbare Felder und Elementarschritt wird definiert als horizontal oder vertikal und nicht über oder auf bestehende Elemente steigen
- + wird ausgegeben, wenn sich auf einem Feld ein Spielstein des Spielers Mission Control befindet. // ein Feld kann von einem Spielstein überdeckt sein, ein Spielstein kann sich allerdings nach der Definition oben nicht auf einem einzigen Feld befinden